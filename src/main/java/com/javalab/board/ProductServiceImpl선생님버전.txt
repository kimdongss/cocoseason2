package com.javalab.board.service;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.javalab.board.repository.ProductRepository;
import com.javalab.board.vo.ImgVo;
import com.javalab.board.vo.ProductVo;
import com.javalab.board.vo.ProductWithImageVo;

import lombok.extern.slf4j.Slf4j;
@Service
@Slf4j
public class ProductServiceImpl implements ProductService {

	@Autowired
	private ProductRepository productRepository;

	/**
	 * 상품 정보를 데이터베이스에 저장하는 메소드.
	 *
	 * @param product 저장할 상품 정보 (ProductVo 객체)
	 */
	@Override
	public void addProduct(ProductVo product) {
		productRepository.insertProduct(product);
	}

	/**
	 * 상품 정보를 저장하고, 관련된 이미지를 업로드하여 저장 경로에 저장한 후
	 * 데이터베이스에 이미지 정보를 저장하는 메소드.
	 * UUID.randomUUID() : 랜덤한 UUID를 생성하는 메소드로 파일명 중복을 방지하기 위해 사용
	 * UUID : Universally Unique Identifier, 범용 고유 식별자
	 * @param product  저장할 상품 정보 (ProductVo 객체)
	 * @param files    업로드된 이미지 파일 리스트
	 * @param filePath 파일이 저장될 루트 디렉토리 경로
	 * @return 성공 시 true, 실패 시 false
	 */
	@Override
	@Transactional // 트랜잭션 적용
	public boolean saveProductWithImages(ProductVo product, List<MultipartFile> files, String filePath) {
		log.info("productWithImages product : " + files.size());
		try {
			// 상품 정보를 데이터베이스에 저장
			addProduct(product);

			// 저장된 상품의 ID를 가져옴
			Long productId = product.getProductId();

			// 날짜 기반으로 파일 저장 경로를 생성
			String uploadFolderPath = getFolder(); // 날짜별 폴더 경로 생성
			
			String uploadPath = filePath + File.separator + uploadFolderPath; // 전체 파일 경로 생성
			File uploadFilePath = new File(uploadPath); // 파일 경로 객체 생성

			// 파일 저장 경로가 존재하지 않으면 디렉토리를 생성
			if (!uploadFilePath.exists()) {
				uploadFilePath.mkdirs(); // 경로에 해당하는 디렉토리를 생성
			}

			// 업로드된 파일들을 처리하고 이미지 정보를 생성
			List<ImgVo> imageList = new ArrayList<>(); // 이미지 정보를 담을 리스트 생성
			for (int i = 0; i < files.size(); i++) { // 업로드된 파일 리스트를 순회
				MultipartFile file = files.get(i); // 현재 파일 가져오기

				// 파일이 비어있지 않은 경우 처리
				if (!file.isEmpty()) {
					String originalFileName = file.getOriginalFilename(); // 원본 파일명 가져오기
					String uniqueFileName = UUID.randomUUID() + "_" + originalFileName; // 고유한 파일명 생성
					File saveFile = new File(uploadFilePath, uniqueFileName); // 저장할 파일 객체 생성

					file.transferTo(saveFile); // 파일을 지정된 경로에 저장

					// 이미지 정보를 생성하여 리스트에 추가
					ImgVo img = new ImgVo();
					img.setProductId(productId); // 상품 ID 설정
					img.setImgPath(uploadFolderPath); // 이미지가 저장된 폴더 경로 설정
					img.setFileName(uniqueFileName); // 저장된 파일명 설정
					img.setIsMain(i == 0 ? 1 : 0); // 첫 번째 이미지를 메인 이미지로 설정
					imageList.add(img); // 리스트에 이미지 정보 추가
				}
			}

			// 이미지 리스트가 비어있지 않다면 데이터베이스에 이미지 정보 저장
			if (!imageList.isEmpty()) {
				insertImages(imageList); // 이미지 정보를 데이터베이스에 삽입
			}

			// 모든 작업이 성공적으로 완료된 경우 true 반환
			return true;
		} catch (IOException e) {
			// 파일 저장 중 오류가 발생한 경우 스택 트레이스를 출력하고 false 반환
			e.printStackTrace();
			throw new RuntimeException("파일 저장 실패", e); // 트랜잭션 롤백을 위해 RuntimeException 발생
		}
	}

	/**
	 * 모든 상품 정보를 조회하는 메소드
	 *
	 * @return 상품 리스트
	 */
	@Override
	public List<ProductVo> getAllProducts() {
		return productRepository.getAllProducts();
	}

	/**
	 * 특정 상품 정보를 조회하는 메소드
	 *
	 * @param productId 조회할 상품 ID
	 * @return 상품 정보
	 */
	@Override
	public ProductWithImageVo getProductWithImages(Long productId) {
		ProductWithImageVo productWithImageVo = productRepository.getProductWithImages(productId);
		log.info("서비스 productWithImageVo : " + productWithImageVo);
		return productWithImageVo;
	}

	/**
	 * 이미지 정보를 데이터베이스에 저장하는 메소드
	 *
	 * @param images 이미지 정보 리스트
	 */
	@Override
	public void insertImages(List<ImgVo> images) {
		productRepository.insertImages(images);
	}
	/*
	 * 날짜별 폴더 경로를 생성하는 메소드
	 */
	private String getFolder() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		String str = sdf.format(date); // 날짜를 문자열로 변환
		log.info("getFolder str : " + str );
		return str.replace("-", File.separator); // 구분자를 파일 시스템에 맞게 변경, 윈도우즈에서는 \\ e.g 2021\\07\\01 -> 폴더 경로로 폴더 생성
	}
}