<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
   
   <!-- 리포지토리 계층의 매퍼 인터페이스와 바보XML을 연결하는 역할 -->
   <mapper namespace="com.javalab.board.repository.ProductRepository">
   
   <!-- 상품저장 -->
   <!-- 
   		1. product_id는 테이블에서 시퀀스로 자동증가 되는데 왜 이 방식을 사용하나?
   		 - 	이 쿼리문에는 ProductVo가 인자로 전달된다. 그렇게 전달된 객체의 productId에
   		 	값을 세팅해서 서비스 레이어로 전달해서 다른 로직에 사용할 수 있게 하기 위함이다.
   		2. selectKey : insert문 실행 전에 select문을 실행하여 키 값을 생성
   		3. keyProperty : 생성된 키 값을 저장할 임시 변수명
   		4. resultType : 생성된 키 값의 데이터 타입
   		5. order :  select 문을 실행할 시점(before: 메인 쿼리 실행전, after: 실행후)
   		
    -->
   <insert id="insertProduct" parameterType="ProductVo">
   		<selectKey keyProperty="productId" resultType="long" order="BEFORE">
   			select seq_product.nextval from dual
   		</selectKey>
   		insert into product(
   			product_id,
   			name,
   			description,
   			unit_price,
   			reg_date)
   		values(
   			#{productId},
   			#{name}, 
   			#{description}, 
   			#{unitPrice}, 
   			sysdate)
   </insert>
   
   <!-- [모든 상품 조회 메소드] -->
   <select id="getAllProducts" resultType="ProductVo">
   		SELECT
   			p.product_id AS productId,
   			p.name,
   			p.description,
   			p.unit_price AS unitPrice,
   			p.reg_date AS regDate
   		FROM product p
   		ORDER BY p.product_id DESC
   </select>
   
   <!-- [한 상품 조회(여러이미지)] -->
   <!-- 여기서 조회된 결과를 아래의 ProductWithImageMap 저장한다. -->
   <select id="getProductWithImages" parameterType="long" resultMap="ProductWithImageMap">
   		SELECT
   		p.product_id AS productId,
   		p.name,
   		p.description,
   		p.unit_price AS unitPrice,
   		p.reg_date AS regDate,
   		pi.img_id AS imgId,
   		pi.img_path AS imgPath,
   		pi.file_name AS fileName,
   		pi.is_main AS isMain
   		FROM product p
   		LEFT JOIN prod_img pi ON p.product_id = pi.product_id
   		WHERE p.product_id = #{productId}
   		ORDER BY pi.img_id
   </select>
   
   <!-- ResultMap 생성 -->
   <!-- 한 상품의 정보 (1개임) 처리된 결과는 ProductWithImageVo에 담기게된다. 
   
   		1. ResultMap : 데이터베이스에서 조회한 복잡한 결과를 객체에 매핑할 때 사용
   		2. 조회 결과를 ProductWithImageVo 객체에 매핑하기 위해서 사용
   		3. id : ProductWithImageVo 에서 key로 사용되는 컬럼
   		4. <result property : ImgVo의 속성. 즉, 필드 
   		4. property : ProductWithImageVo의 컬럼명(속성이름)
   		5. colum : 쿼리 실행결과 컬럼(데이터베이스 조회한거)
   		[정리] 하나의 상품은 여러개의 이미지를 가질 수 있다. 이 정보를 ProductWithImageVo에
   				저장하기 위해서 resultMap이라는 형태의 구조체가 필요한 것이다. (구조체는 mybatis가 만들어줌)
    -->
   <resultMap type="ProductWithImageVo" id="ProductWithImageMap">
   		<id property="productId" column="productId" />
   		<result property="name" column="name" />
   		<result property="description" column="description" />
   		<result property="unitPrice" column="unitPrice" />
   		<result property="regDate" column="regDate" />
		<!-- collection
			List<ImgVo> 타입 (N개임) 한 상품은 여러개의 이미지객체(ex-이미지의 경로)를 가질 수 있다.
			상품과 이미지와의 관계는 1 : 다 관계이다.  이미지가 여러개일수도, 없을 수도 있다.
			
			1. property="imgList" : ProductWithImageVo의 속성
			2. ofType : 저장될 객체 타입
			3. id : ImgVo의 키가 되는 속성
			4. colum : 조회 결과 컬럼
		 -->
   		<collection property="imgList" ofType="imgVo" >
   			<id property="imgId" column="imgId" />
   			<result property="productId" column="productId" />
   			<result property="imgPath" column="imgPath" />
   			<result property="fileName" column="fileName" />
   			<result property="isMain" column="isMain" />
   		</collection>
   	</resultMap>
   	
   		<!-- 이미지 여러장 저장 -->
   		<!-- 
   			상품 등록 화면에서 여러개의 이미지를 업로드한 경우 그 이미지들을 한꺼번에 prod_img tbl에 저장한다.
   			1. MyBatis의 <foreach> 태그를 사용하여 List 타입의 데이터를 반복적으로 처리한다.
   			2. union all을 사용하여 여러 이미지를 하나의 insert 구문으로 묶어서 효율적으로 처리한다.
   			3. 시퀀스를 사용하여 img_id의 값을 자동 생성한다.
   			4. parameterType : java.util.List 타입의 파라미터를 받을 수 있다.
   			5. <foreach> 구문의 collection : java에서 전달된 List<ImgVo> 객체를 참조한다.
   			6. <foreach> 구문의 item : List<ImgVo>에서 하나씩 꺼낸 imgVo를 임시로 저장하는 변수
   			7. <foreach> 구문의 seperator : 반복된 쿼리 구문 사이에 들어갈 쿼리문(union all)
   			[순서]
   			1. 서비스 레이어에서 List<ImgVo> 형태의 데이터를 MyBatis로 전달한다.
   			2. <foreach> 태그를 사용하여 List<ImgVo>의 값을 하나씩 꺼내서 insert 구문을 반복적으로 생성한다.
   			3. 생성된 insert 구문은 union all을 통해서 연결된다.
   			4. insert into ~ select 구문을 통해서 union all 로 연결된 쿼리문을 한 번에 실행한다.
   		 -->
   		<insert id="insertImages" parameterType="java.util.List">
   			insert into prod_img(
   				img_id,
   				product_id,
   				img_path,
   				file_name,
   				is_main)
   			select seq_img.nextval, A.*
   			from(
   				<foreach collection="list" item="image" separator="union all">
   					SELECT
   					#{image.productId} AS product_id, 	-- 상품 ID
   					#{image.imgPath} AS img_path, 		-- 이미지 경로
   					#{image.fileName} AS file_name, 	-- 파일 이름
   					#{image.isMain} AS is_main 			-- 메인 이미지 여부
   					FROM DUAL
   					
   				</foreach>
   			) A
   		</insert>
   		
   		
   		<!-- 상품 정보 수정 -->
		<update id="updateProductWithImages" parameterType="ProductVo">
		    UPDATE product
		    SET name = #{name},
		        description = #{description},
		        unit_price = #{unitPrice}
		    WHERE product_id = #{productId}
		</update>
		
		<!-- 상품과 관련된 이미지를 삭제하는 쿼리 -->
		<delete id="deleteImagesByProductId" parameterType="long">
		    DELETE FROM prod_img WHERE product_id = #{productId}
		</delete>

		<!-- 상품 삭제 -->
		<delete id="deleteProduct" parameterType="long">
		    DELETE FROM product
		    WHERE product_id = #{productId}
		</delete>
   		
   		
   		
   		
   </mapper>